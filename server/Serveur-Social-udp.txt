// Publie le mercredi apr√®s-midi

///////////////////////////////////////////////  CLASS MESSAGE   ////////////////////////////////
package com.mycompany.serveursocial;

public class Message {
  String msg;
  boolean envoye, recu;
  Message(String m, boolean e) {
      msg=m;
      envoye=e;
      recu=false;
  }
  void recu() {
      recu=true;
  }
  
  public String toString() {
      if (!recu) return "message non lu "+msg+"\n";
      else if (envoye) return "moi:"+msg+"\n";
      else return "ami:"+msg+"\n";
  }
}


///////////////////////////////////////////////  CLASS AMI   ////////////////////////////////

package com.mycompany.serveursocial;

public class Ami {
  String login;
  Message m[];
  int nbMessage;
  boolean accepte;
  Ami(String a) {
      login=a;
      nbMessage=0;
      m=new Message[10];
      accepte=false;
  }
  boolean estAccepte() {
      return accepte;
  }
  void accepte() {
      accepte=true;
  }
  void ajouteMessage(String msg, boolean a) {
      if (nbMessage<10) {
          m[nbMessage]=new Message(msg,a);
          nbMessage++;
      }
  }
  public String toString() {
      String s="Ami="+login+"\n";
      for (int i=0; i<nbMessage; i++) s=s+m[i].toString();
      return s;
  }
}


///////////////////////////////////////////////  CLASS UTILISATEUR   ////////////////////////////////

package com.mycompany.serveursocial;

public class Utilisateur {
    String login, pwd;
    Ami a[];
    int nbAmi;
    boolean connecte;
    public Utilisateur(String l, String p) {
        login=l;
        pwd=p;
        nbAmi=0;
        a=new Ami[10];
        connecte=false;
    }
    boolean estConnecte() {
        return connecte;
    }
    void connecte() {
        connecte=true;
    }
    void deconnecte() {
        connecte=false;
    }
    void nouvelAmi(String ami) {
        if (nbAmi<10) {
            a[nbAmi]=new Ami(ami);
            nbAmi++;
        }
    }
    void nouveauMessage(String ami, String msg, boolean envoye){
        int i=0;
        while (!a[i].login.equals(ami) && i<nbAmi) i++;
        if (a[i].login.equals(ami)){
            a[i].ajouteMessage(msg, envoye);
        }
    }
    public String toString() {
        String s="utilisateur="+login+"\n";
        for (int i=0; i<nbAmi; i++) s=s+a[i].toString();
        return s;
    }
}


///////////////////////////////////////////////  CLASS ServeurSocial   ////////////////////////////////

package com.mycompany.serveursocial;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

public class ServeurSocial {
    static final int port = 6010 ;
    DatagramSocket socket;
    DatagramPacket recu;
    
    ServeurSocial() throws SocketException, IOException {
        System.out.println("Serveur en cours");
        //init();
        Utilisateur u[]=new Utilisateur[10];
        int nbUtilisateur=0;
        socket = new DatagramSocket(port) ;
        byte [] buffer  = new byte [1024] ;
        String s ;
        recu = new DatagramPacket(buffer, buffer.length);
        for ( ; ; ) {
          socket.receive(recu) ;
          s = new String(recu.getData(), 0, recu.getLength());
          System.out.println("recu="+s) ;
          String t[]=s.split(",");
          System.out.println("action="+t[0]+" arg="+t[1]);
          if (t[0].equals("creation")) {         ///////////////////////////////  CREATION
              if (nbUtilisateur<10) {
                  boolean present=false;
                  for (int i=0; i<nbUtilisateur; i++)
                    if (u[i].login.equals(t[1])) present=true;
                  if (!present) {
                    u[nbUtilisateur]=new Utilisateur(t[1],"");
                    nbUtilisateur++;
                    envoi("creation_accepte,"+t[1]);
                  }
                  else envoi("creation_refus,"+t[1]);
              }
              else envoi("creation_refus,"+t[1]);
          }
          if (t[0].equals("connexion")) {         ///////////////////////////////  CONNEXION
                boolean present=false;
                for (int i=0; i<nbUtilisateur; i++)
                  if (u[i].login.equals(t[1])) {
                      present=true;
                      if (u[i].estConnecte()) envoi("connexion_refus,"+t[1]);
                      else {
                        u[i].connecte();
                        envoi("connexion_accepte,"+t[1]);
                      }
                  }
                if (!present) envoi("connexion_refus,"+t[1]);
          }
          if (t[0].equals("demande_ami")) {         ///////////////////////////////  DEMANDE_AMI
                boolean present=false;
                for (int i=0; i<nbUtilisateur; i++)
                  if (u[i].login.equals(t[2])) {
                      present=true;
                      boolean amiPresent=false;
                      for (int j=0; j<u[i].nbAmi; j++)
                        if (u[i].a[j].login.equals(t[1])) amiPresent=true;
                      if (amiPresent) envoi("demande_ami_refus,"+t[1]+","+t[2]);
                      else {
                        u[i].nouvelAmi(t[1]);
                        envoi("demande_ami_encours,"+t[1]+","+t[2]);
                      }
                  }
                if (!present) envoi("demande_ami_refus,"+t[1]+","+t[2]);
          }
          if (t[0].equals("action")) {         ///////////////////////////////  ACTION EN ATTENTE SUR LE SERVEUR
                boolean present=false, amiPresent=false;
                for (int i=0; i<nbUtilisateur; i++)
                  if (u[i].login.equals(t[1])) {
                      present=true;
                      amiPresent=false;
                      for (int j=0; j<u[i].nbAmi; j++)
                        if (!u[i].a[j].estAccepte()) {
                            amiPresent=true;
                            envoi("demande_ami,"+t[1]+","+u[i].a[j].login);
                        }
                  }
                  if (!present || present && !amiPresent) envoi("aucune,"+t[1]);
          }
          if (t[0].equals("demande_ami_accepte")) {         ///////////////////////////////  ACTION_AMI_ACCEPTE
                boolean present=false;
                System.out.println(t[1]+" ami attente:"+t[2]);
                for (int i=0; i<nbUtilisateur; i++)
                  if (u[i].login.equals(t[1])) {
                      present=true;
                      boolean amiPresent=false;
                      for (int j=0; j<u[i].nbAmi; j++)
                        if (u[i].a[j].login.equals(t[2])) {
                            amiPresent=true;
                            u[i].a[j].accepte();
                            envoi("ami_accepte,"+t[1]+","+t[2]);
                        }
                        if (!amiPresent) envoi("ami_refus,"+t[1]+","+t[2]);
                  }
                for (int i=0; i<nbUtilisateur; i++)
                  if (u[i].login.equals(t[2])) {
                      boolean amiPresent=false;
                      for (int j=0; j<u[i].nbAmi; j++)
                        if (u[i].a[j].login.equals(t[1])) amiPresent=true;
                      if (!amiPresent) {
                        u[i].nouvelAmi(t[1]);
                        u[i].a[u[i].nbAmi-1].accepte();
                      }
                  }
          }
          if (t[0].equals("liste_tout")) {
              String r="";
              for (int i=0; i<nbUtilisateur; i++) r=r+u[i].toString();                
              System.out.println(r);
              envoi("liste_accepte "+r);
          }
        }
    }
    
    void envoi(String msg) throws SocketException, IOException {
        int msglen = msg.length() ;
        byte [] message = new byte [msglen] ;
        message=msg.getBytes();
        DatagramPacket envoye = new DatagramPacket(message, msglen, recu.getAddress(), recu.getPort());
        socket.send(envoye);
        System.out.println(msg+" envoye") ;
    }
    
    public static void main(String[] args) throws SocketException, IOException {
      new ServeurSocial();
    }
}

